{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "df-ajbarcagua-test"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://saajbarcaguatest.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_erroneous_orders_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "erroneous",
						"fileSystem": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_high_value_orders_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "high_value_orders",
						"fileSystem": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_low_value_orders_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "low_value_orders",
						"fileSystem": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_order_items_adls_raw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "order_items-220517-190915.csv",
						"fileSystem": "src"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "order_item_id",
						"type": "String"
					},
					{
						"name": "order_item_order_id",
						"type": "String"
					},
					{
						"name": "order_item_product_id",
						"type": "String"
					},
					{
						"name": "order_item_quantity",
						"type": "String"
					},
					{
						"name": "order_item_subtotal",
						"type": "String"
					},
					{
						"name": "order_item_product_price",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_orders_adls_raw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "orders-220517-190915.csv",
						"fileSystem": "src"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "order_id",
						"type": "String"
					},
					{
						"name": "order_date",
						"type": "String"
					},
					{
						"name": "order_customer_id",
						"type": "String"
					},
					{
						"name": "order_status",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_get_high_and_low_value_orders')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_orders_adls_raw",
								"type": "DatasetReference"
							},
							"name": "orders"
						},
						{
							"dataset": {
								"referenceName": "ds_order_items_adls_raw",
								"type": "DatasetReference"
							},
							"name": "orderitems"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_high_value_orders_sink",
								"type": "DatasetReference"
							},
							"name": "highValueOrderSink"
						},
						{
							"dataset": {
								"referenceName": "ds_low_value_orders_sink",
								"type": "DatasetReference"
							},
							"name": "lowValueOrderSink"
						},
						{
							"dataset": {
								"referenceName": "ds_erroneous_orders_sink",
								"type": "DatasetReference"
							},
							"name": "erroneousValueOrderSink"
						}
					],
					"transformations": [
						{
							"name": "getOrderItemSubtotal"
						},
						{
							"name": "joinOrderItemToOrders"
						},
						{
							"name": "removeRedundantOrderId",
							"description": "="
						},
						{
							"name": "separateOrders",
							"description": "Group orders based on orders subtotal"
						}
					],
					"scriptLines": [
						"source(output(",
						"          order_id as string,",
						"          order_date as string,",
						"          order_customer_id as string,",
						"          order_status as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> orders",
						"source(output(",
						"          order_item_id as string,",
						"          order_item_order_id as string,",
						"          order_item_product_id as string,",
						"          order_item_quantity as integer,",
						"          order_item_subtotal as double,",
						"          order_item_product_price as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> orderitems",
						"orderitems aggregate(groupBy(order_item_order_id),",
						"     order_item_subtotal = sum(order_item_subtotal)) ~> getOrderItemSubtotal",
						"getOrderItemSubtotal, orders join(order_item_order_id == order_id,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinOrderItemToOrders",
						"joinOrderItemToOrders select(mapColumn(",
						"          {Order Id} = order_id,",
						"          {Customer ID} = order_customer_id,",
						"          {Order Date} = order_date,",
						"          {Orders Subtotal} = order_item_subtotal,",
						"          {Order Status} = order_status",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> removeRedundantOrderId",
						"removeRedundantOrderId split({Orders Subtotal}>500,",
						"     {Orders Subtotal}<500,",
						"     disjoint: false) ~> separateOrders@(highValueOrders, lowValueOrders, others)",
						"separateOrders@highValueOrders sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> highValueOrderSink",
						"separateOrders@lowValueOrders sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> lowValueOrderSink",
						"separateOrders@others sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> erroneousValueOrderSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_orders_adls_raw')]",
				"[concat(variables('factoryId'), '/datasets/ds_order_items_adls_raw')]",
				"[concat(variables('factoryId'), '/datasets/ds_high_value_orders_sink')]",
				"[concat(variables('factoryId'), '/datasets/ds_low_value_orders_sink')]",
				"[concat(variables('factoryId'), '/datasets/ds_erroneous_orders_sink')]"
			]
		}
	]
}